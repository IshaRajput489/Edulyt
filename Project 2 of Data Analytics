PROBLEM STATEMENT:

About the Data File-
This dataset contains insights into credit card transactions made in India, offering a comprehensive look at the 
spending habits of Indians across the nation.
City: The city in which the transaction took place. (String)
Date: The date of the transaction. (Date)
Card Type: The type of credit card used for the transaction. (String)
Exp Type: The type of expense associated with the transaction. (String)
Gender: The gender of the cardholder. (String)
Amount: The amount of the transaction. (Number)

These topics you will learn when you solve this case study-
Date functions: DATEDIFF, DATEPART, DATEADD
CASE WHEN Statement
Aggregate functions with CASE WHEN, GROUP BY, ORDER BY
Joins
Window functions (DENSE_RANK, LEAD, LAG)
CTE (common table expression)

TASKS:
1. Write a query to print top 5 cities with highest spends and their percentage contribution of total credit 
card spends.
2. Write a query to print highest spend month and amount spent in that month for each card type.
3. Write a query to print the transaction details (all columns from the table) for each card type when it 
reaches a cumulative of 1000000 total spends (We should have 4 rows in the o/p one for each card type).
4. Write a query to find city which had lowest percentage spend for gold card type.
5. Write a query to print 3 columns: city, highest_expense_type , lowest_expense_type (example format : 
Delhi , bills, Fuel).
6. Write a query to find percentage contribution of spends by females for each expense type.
7. Which card and expense type combination saw highest month over month growth in Jan-2014.
8. During weekends which city has highest total spend to total no of transactionâ€™s ratio?
9. Which city took least number of days to reach its 500th transaction after first transaction in that city?

ANSWERS:
import pandas as pd
# Path to the Excel file
file_path = r"C:\Users\ishar\OneDrive\Documents\edulyt\Data-&-Problem-Statement---Project----2\Credit card transactions - Project - 2.csv"
# Load the data from the Excel file
df = pd.read_csv(file_path)

# Task 1: Top 5 Cities with Highest Spends and Their Contribution to Total Credit Card Spends
city_spends = df.groupby('City')['Amount'].sum().reset_index()
total_spend = city_spends['Amount'].sum()
top_5_cities = city_spends.sort_values(by='Amount', ascending=False).head(5)
top_5_cities['Contribution (%)'] = (top_5_cities['Amount'] / total_spend) * 100
print("Task 1: Top 5 Cities with Highest Spends and Their Contribution")
print(top_5_cities)

# Task 2: Highest Spend Month and Amount for Each Card Type
df['Date'] = pd.to_datetime(df['Date'], format='%d-%b-%y')
df['Month-Year'] = df['Date'].dt.to_period('M')
monthly_spends = df.groupby(['Card Type', 'Month-Year'])['Amount'].sum().reset_index()
highest_spend_per_card = monthly_spends.loc[monthly_spends.groupby('Card Type')['Amount'].idxmax()]
print("\nTask 2: Highest Spend Month and Amount for Each Card Type")
print(highest_spend_per_card)

# Task 3: Print Transaction Details for Each Card Type with Spend > 100,000
df['Cumulative Amount'] = df.groupby('Card Type')['Amount'].cumsum()
transactions_above_100k = df[df['Cumulative Amount'] > 100000]
transactions_above_100k_details = transactions_above_100k[['Card Type', 'Date', 'Amount', 'City', 'Gender', 'Cumulative Amount']]
print("\nTask 3: Transaction Details with Cumulative Spend > 100,000")
print(transactions_above_100k_details)

# Task 4: City with Lowest Percentage Spend for Gold Card Type
gold_data = df[df['Card Type'] == 'Gold']
gold_city_spends = gold_data.groupby('City')['Amount'].sum().reset_index()
gold_total_spend = gold_city_spends['Amount'].sum()
gold_city_spends['Percentage Spend'] = (gold_city_spends['Amount'] / gold_total_spend) * 100
lowest_gold_spend_city = gold_city_spends.sort_values(by='Percentage Spend').head(1)
print("\nTask 4: City with Lowest Percentage Spend for Gold Card Type")
print(lowest_gold_spend_city)

# Task 5: Highest, Lowest, and Equal Contribution of Spends by Expense Type
expense_type_summary = df.groupby('Exp Type')['Amount'].agg(['max', 'min', 'mean']).reset_index()
print("\nTask 5: Highest, Lowest, and Equal Contribution of Spends by Expense Type")
print(expense_type_summary)

# Task 6: Gender and Expense Type Combination with Highest Month-over-Month Growth in Jan 2014
jan_2014_data = df[(df['Date'] >= '2014-01-01') & (df['Date'] < '2014-02-01')]
jan_2014_group = jan_2014_data.groupby(['Gender', 'Exp Type'])['Amount'].sum().reset_index()
jan_2014_growth = jan_2014_group.sort_values(by='Amount', ascending=False).head(1)
print("\nTask 6: Gender and Expense Type Combination with Highest Month-over-Month Growth in Jan 2014")
print(jan_2014_growth)

# Task 7: Weekends with Highest Total Spend in a Transaction's Ratio
df['Weekday'] = df['Date'].dt.weekday
df['Is_Weekend'] = df['Weekday'].apply(lambda x: 1 if x >= 5 else 0)
weekend_spends = df[df['Is_Weekend'] == 1]['Amount'].sum()
weekday_spends = df[df['Is_Weekend'] == 0]['Amount'].sum()
weekend_ratio = weekend_spends / weekday_spends
print("\nTask 7: Weekends with Highest Total Spend in a Transaction's Ratio")
print(weekend_ratio)

# Task 8: Day of the Week with Highest Spend to Total No. of Transactions Ratio
day_spends = df.groupby('Weekday')['Amount'].sum().reset_index()
day_transactions = df.groupby('Weekday').size().reset_index(name='Transactions')
day_ratio = pd.merge(day_spends, day_transactions, on='Weekday')
day_ratio['Spend to Transaction Ratio'] = day_ratio['Amount'] / day_ratio['Transactions']
highest_day_ratio = day_ratio.sort_values(by='Spend to Transaction Ratio', ascending=False).head(1)
print("\nTask 8: Day of the Week with Highest Spend to Total No. of Transactions Ratio")
print(highest_day_ratio)

# Task 9: City Reaching 500th Transaction Fastest
df['Transaction Count'] = df.groupby('City').cumcount() + 1
city_500th_transaction = df[df['Transaction Count'] == 500].sort_values(by='Date').head(1)
print("\nTask 9: City Reaching 500th Transaction Fastest")
print(city_500th_transaction)

# Data Visualization: Line Plot of Total Spend by Card Type Over Time
# Group data by Card Type and Month-Year to calculate total spend
card_type_monthly_spend = df.groupby(['Card Type', 'Month-Year'])['Amount'].sum().reset_index()
# Debugging prints to verify the DataFrame
print("First few rows of the grouped DataFrame:")
print(card_type_monthly_spend.head())
print("\nDataFrame columns:", card_type_monthly_spend.columns)
# Check for NaN values
print("\nChecking for NaN values in the DataFrame:")
print(card_type_monthly_spend.isna().sum())
# Ensure 'Month-Year' is a string for plotting
card_type_monthly_spend['Month-Year'] = card_type_monthly_spend['Month-Year'].astype(str)
# Set the figure size for the plot
plt.figure(figsize=(12, 6))
# Create a line plot for each Card Type
sns.lineplot(x='Month-Year', y='Amount', hue='Card Type', data=card_type_monthly_spend, marker='o')
# Set the title and labels for the plot
plt.title('Total Spend by Card Type Over Time')
plt.xlabel('Month-Year')
plt.ylabel('Total Amount Spent')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(True)  # Add grid lines for easier visualization
plt.legend(title='Card Type')  # Add legend title
plt.tight_layout()  # Adjust layout to prevent clipping
plt.show()
